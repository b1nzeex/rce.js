{"version":3,"file":"socketManager.js","sourceRoot":"","sources":["../../src/socket/socketManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { IServerOptions } from \"../types\";\nimport { WebSocket } from \"ws\";\nimport type RCEManager from \"../manager\";\nimport { RCEEvent } from \"../types\";\nimport CommandManager from \"../commands/commandManager\";\nimport ResponseHandler from \"../commands/responseHandler\";\n\nexport default class SocketManager {\n  private _manager: RCEManager;\n  private _socket: WebSocket | null = null;\n  private connectionAttempts: number = 0;\n  private _options: IServerOptions;\n  private _reconnectionTimer: NodeJS.Timeout | null = null;\n  private _isDestroyed: boolean = false;\n\n  public constructor(manager: RCEManager, options: IServerOptions) {\n    this._manager = manager;\n    this._options = options;\n    this.connect(options);\n  }\n\n  public connect(opts: IServerOptions): void {\n    if (this._isDestroyed) {\n      return;\n    }\n\n    const { rcon, reconnection } = opts;\n    const { host, port, password } = rcon;\n\n    // Clear any existing reconnection timer\n    if (this._reconnectionTimer) {\n      clearTimeout(this._reconnectionTimer);\n      this._reconnectionTimer = null;\n    }\n\n    const url = `ws://${host}:${port}/${password}`;\n    this._socket = new WebSocket(url);\n\n    this._socket.on(\"open\", () => {\n      this.connectionAttempts = 0; // Reset connection attempts on successful connection\n      \n      const server = this._manager.getServer(opts.identifier);\n      if (server) {\n        server.socket = this._socket;\n        server.flags.push(\"READY\");\n        this._manager.updateServer(server);\n      }\n\n      this._manager.emit(RCEEvent.Ready, {\n        server: this._manager.getServer(opts.identifier),\n      });\n\n      this._manager.logger.debug(\n        `[${opts.identifier}] WebSocket connection established.`\n      );\n    });\n\n    this._socket.on(\"close\", (code: number, reason: string) => {\n      this._manager.logger.debug(\n        `[${opts.identifier}] WebSocket closed: ${code} - ${reason}`\n      );\n\n      if (this._socket) {\n        this._socket.removeAllListeners();\n        this._socket.terminate();\n        this._socket = null;\n      }\n\n      const server = this._manager.getServer(opts.identifier);\n      if (server) {\n        server.flags = server.flags.filter((flag) => flag !== \"READY\");\n        this._manager.updateServer(server);\n      }\n\n      // Only attempt reconnection if not a normal closure and reconnection is enabled\n      if (code !== 1000 && !this._isDestroyed) {\n        this.attemptReconnection(opts);\n      }\n    });\n\n    this._socket.on(\"error\", (error: Error) => {\n      this._manager.emit(RCEEvent.Error, {\n        error: `WebSocket error for server \"${opts.identifier}\": ${error.message}`,\n        server: this._manager.getServer(opts.identifier) || undefined,\n      });\n    });\n\n    this._socket.on(\"message\", (data: any) => {\n      const parsed = JSON.parse(data.toString());\n\n      if (parsed.Message) {\n        const uniqueId = parsed.Identifier;\n        const server = this._manager.getServer(opts.identifier);\n        const message = parsed.Message.replace(/\\u0000/g, \"\").trim();\n\n        this._manager.logger.debug(\n          `[${opts.identifier}] Received message: ${JSON.stringify(message)}`\n        );\n\n        // Resolve the command if it exists\n        if (uniqueId > 0) {\n          const cmd = CommandManager.get(opts.identifier, Number(uniqueId));\n          if (cmd) {\n            if (cmd.timeout) {\n              clearTimeout(cmd.timeout);\n            }\n\n            cmd.resolve(message);\n          }\n        }\n\n        // Send the command to regular expression handler\n        ResponseHandler.handle(this._manager, server, message);\n      }\n    });\n  }\n\n  private attemptReconnection(opts: IServerOptions): void {\n    if (this._isDestroyed) {\n      return;\n    }\n\n    const { reconnection } = opts;\n    const isReconnectionEnabled = reconnection?.enabled !== false; // Default to true\n    const maxAttempts = reconnection?.maxAttempts ?? -1; // Default to infinite (-1)\n    const interval = reconnection?.interval ?? 5000; // Default to 5 seconds\n\n    // Check if reconnection is disabled\n    if (!isReconnectionEnabled) {\n      this._manager.logger.warn(\n        `[${opts.identifier}] Reconnection is disabled. Not attempting to reconnect.`\n      );\n      return;\n    }\n\n    // Check if we've exceeded max attempts (if maxAttempts is not -1)\n    if (maxAttempts !== -1 && this.connectionAttempts >= maxAttempts) {\n      this._manager.emit(RCEEvent.Error, {\n        error: `WebSocket connection failed for server \"${opts.identifier}\" after ${maxAttempts} attempts.`,\n        server: this._manager.getServer(opts.identifier) || undefined,\n      });\n      return;\n    }\n\n    this.connectionAttempts++;\n    this._manager.logger.warn(\n      `[${opts.identifier}] Attempting to reconnect WebSocket... (Attempt ${this.connectionAttempts}${maxAttempts !== -1 ? `/${maxAttempts}` : ''})`\n    );\n\n    this._reconnectionTimer = setTimeout(() => {\n      if (!this._isDestroyed) {\n        this.connect(opts);\n      }\n    }, interval);\n  }\n\n  public destroy(): void {\n    this._isDestroyed = true;\n    \n    if (this._reconnectionTimer) {\n      clearTimeout(this._reconnectionTimer);\n      this._reconnectionTimer = null;\n    }\n\n    if (this._socket) {\n      this._socket.removeAllListeners();\n      this._socket.terminate();\n      this._socket = null;\n    }\n  }\n\n  public getSocket(): WebSocket | null {\n    return this._socket;\n  }\n}\n"]}