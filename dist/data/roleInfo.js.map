{"version":3,"file":"roleInfo.js","sourceRoot":"","sources":["../../src/data/roleInfo.ts"],"names":[],"mappings":";;AASA,sCAsCC;AA7CD;;;;;;GAMG;AACH,SAAgB,aAAa,CAC3B,gBAAwB,EACxB,UAAqB,EAAE;IAEvB,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC9C,MAAM,OAAO,GAA6B,EAAE,CAAC;IAC7C,IAAI,WAAW,GAAkB,IAAI,CAAC;IAEtC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,OAAO;YAAE,SAAS;QAEvB,IAAI,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;YACrC,WAAW,GAAG,OAAO,CAAC;YACtB,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;gBAAE,OAAO,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;QACvD,CAAC;aAAM,IAAI,WAAW,EAAE,CAAC;YACvB,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE,CAAC;QAC3B,OAAO,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QACzB,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE,CAAC;QAC3B,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YAChC,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;YAClD,IAAI,MAAM,EAAE,CAAC;gBACX,MAAM,CAAC,IAAI,GAAG,IAAgB,CAAC;YACjC,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,EAAE,OAAO,EAAE,CAAC;AACrB,CAAC","sourcesContent":["import { GameRole, IPlayer } from \"../types\";\n\n/**\n * Parses the role info response and sets each player's `role`.\n * Players not in any role fall back to `null`.\n * @param roleInfoResponse The raw response string\n * @param players List of currently connected players\n * @returns Object containing updated player list\n */\nexport function parseRoleInfo(\n  roleInfoResponse: string,\n  players: IPlayer[] = []\n): { players: IPlayer[] } {\n  const lines = roleInfoResponse.split(/\\r?\\n/);\n  const roleMap: Record<string, string[]> = {};\n  let currentRole: string | null = null;\n\n  for (const line of lines) {\n    const trimmed = line.trim();\n    if (!trimmed) continue;\n\n    if (/^[A-Z][A-Za-z]*$/.test(trimmed)) {\n      currentRole = trimmed;\n      if (!roleMap[currentRole]) roleMap[currentRole] = [];\n    } else if (currentRole) {\n      roleMap[currentRole].push(trimmed);\n    }\n  }\n\n  for (const role in roleMap) {\n    roleMap[role] = Array.from(new Set(roleMap[role]));\n  }\n\n  players.forEach((player) => {\n    player.role = null;\n  });\n\n  for (const role in roleMap) {\n    for (const ign of roleMap[role]) {\n      const player = players.find((p) => p.ign === ign);\n      if (player) {\n        player.role = role as GameRole;\n      }\n    }\n  }\n\n  return { players };\n}\n"]}