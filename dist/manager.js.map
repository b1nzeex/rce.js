{"version":3,"file":"manager.js","sourceRoot":"","sources":["../src/manager.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  type IServerOptions,\r\n  type IServer,\r\n  type IEvent,\r\n  RCEEvent,\r\n  type IRustServerInformation,\r\n  type IOptions,\r\n  LogLevel,\r\n  type ILogger,\r\n  Player,\r\n} from \"./types\";\r\nimport SocketManager from \"./socket/socketManager\";\r\nimport { EventEmitter } from \"events\";\r\nimport CommandManager from \"./commands/commandManager\";\r\nimport Logger from \"./logger\";\r\nimport { parseTeamInfo } from \"./data/teamInfo\";\r\nimport { Team } from \"./types\";\r\n\r\nexport default class RCEManager extends EventEmitter {\r\n  private servers: Map<string, IServer> = new Map();\r\n  public logger: ILogger;\r\n\r\n  /**\r\n   *\r\n   * @param opts Options for the RCEManager instance.\r\n   * @param opts.logLevel The log level for the logger. Default is LogLevel.Info\r\n   * Creates an instance of RCEManager.\r\n   */\r\n  public constructor(opts: IOptions) {\r\n    super();\r\n\r\n    this.logger =\r\n      opts.logger?.instance ||\r\n      new Logger(opts.logger?.level, opts.logger?.file);\r\n\r\n    this.on(RCEEvent.Error, (payload) => {\r\n      if (payload.server) {\r\n        this.logger.error(`[${payload.server.identifier}] ${payload.error}`);\r\n      } else {\r\n        this.logger.error(payload.error);\r\n      }\r\n    });\r\n    this.on(RCEEvent.Ready, (payload) => {\r\n      this.updatePlayers(payload.server.identifier);\r\n      this.updateBroadcasters(payload.server.identifier);\r\n      this.fetchGibs(payload.server.identifier);\r\n      \r\n      // Fetch team information on ready\r\n      this.fetchTeamInfo(payload.server.identifier).catch(error => {\r\n        this.logger.debug(\r\n          `[${payload.server.identifier}] Failed to fetch team info: ${error.message}`\r\n        );\r\n      });\r\n      \r\n      this.logger.info(\r\n        `[${payload.server.identifier}] Server Successfully Added!`\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param options Options for the server to be added.\r\n   * @param options.identifier Unique identifier for the server.\r\n   * @param options.state Any additional information for the server.\r\n   * @param options.rcon RCON connection options for the server.\r\n   * @param options.rcon.port RCON port for the server.\r\n   * @param options.rcon.password RCON password for the server.\r\n   * @param options.rcon.host RCON host for the server.\r\n   * Creates a new server instance and adds it to the manager.\r\n   * @returns void\r\n   */\r\n  public addServer(options: IServerOptions): void {\r\n    this.logger.debug(`[${options.identifier}] Attempting To Add Server...`);\r\n\r\n    if (this.servers.has(options.identifier)) {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Server With Identifier \"${options.identifier}\" Already Exists!`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const socketManager = new SocketManager(this, options);\r\n    const socket = socketManager.getSocket();\r\n    const server: IServer = {\r\n      identifier: options.identifier,\r\n      socket,\r\n      socketManager,\r\n      flags: [],\r\n      intervals: {\r\n        playerRefreshing: setInterval(() => {\r\n          this.updatePlayers(options.identifier);\r\n        }, 60_000),\r\n\r\n        frequencyRefreshing: setInterval(() => {\r\n          this.updateBroadcasters(options.identifier);\r\n        }, 60_000),\r\n\r\n        gibRefreshing: setInterval(() => {\r\n          this.fetchGibs(options.identifier);\r\n        }, 60_000),\r\n      },\r\n      state: options.state || [],\r\n      players: [],\r\n      frequencies: [],\r\n      teams: [],\r\n    };\r\n\r\n    this.servers.set(options.identifier, server);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param server The server object to update.\r\n   * @param server.identifier Unique identifier for the server.\r\n   * @returns void\r\n   * Updates an existing server instance in the manager.\r\n   */\r\n  public updateServer(server: IServer): void {\r\n    if (!this.servers.has(server.identifier)) {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Server With Identifier \"${server.identifier}\" Does Not Exist!`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.servers.set(server.identifier, server);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param identifier Unique identifier for the server to be removed.\r\n   * Removes a server instance from the manager.\r\n   * @returns void\r\n   */\r\n  public removeServer(identifier: string): void {\r\n    if (!this.servers.has(identifier)) {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Server With Identifier \"${identifier}\" Does Not Exist!`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const server = this.servers.get(identifier);\r\n    if (server) {\r\n      // Properly destroy the SocketManager to stop reconnection attempts\r\n      if (server.socketManager) {\r\n        server.socketManager.destroy();\r\n      }\r\n\r\n      if (server.socket) {\r\n        server.socket.close();\r\n      }\r\n\r\n      Object.values(server.intervals).forEach(clearInterval);\r\n    }\r\n\r\n    this.servers.delete(identifier);\r\n    this.logger.info(`[${identifier}] Server Successfully Removed!`);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param identifier Unique identifier for the server to be fetched.\r\n   * Retrieves a server instance by its identifier.\r\n   * @returns IServer | null\r\n   */\r\n  public getServer(identifier: string): IServer | null {\r\n    return this.servers.get(identifier) || null;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param identifier Unique identifier for the server to fetch information from.\r\n   * Fetches server information using the RCON command \"serverinfo\".\r\n   * @returns IRustServerInformation | string | undefined\r\n   */\r\n  public async fetchInfo(identifier: string) {\r\n    const server = this.getServer(identifier);\r\n    if (!server) {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Server With Identifier \"${identifier}\" Does Not Exist!`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const info = await this.sendCommand(identifier, \"serverinfo\");\r\n    if (!info) {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Failed To Fetch Server Information For \"${identifier}\"!`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    let cleanOutput = info.replace(/\\\\n/g, \"\").trim();\r\n    try {\r\n      const json = JSON.parse(cleanOutput);\r\n      return json as IRustServerInformation;\r\n    } catch (error) {\r\n      return info;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param identifier Unique identifier for the server to send the command to.\r\n   * @param command The command to be sent to the server.\r\n   * Sends a command to the server using the RCON connection.\r\n   * @returns Promise<string | undefined>\r\n   */\r\n  public async sendCommand(\r\n    identifier: string,\r\n    command: string\r\n  ): Promise<string | undefined> {\r\n    const server = this.getServer(identifier);\r\n    if (!server?.socket) {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Server With Identifier \"${identifier}\" Does Not Exist Or Is Not Connected!`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!server.flags.includes(\"READY\")) return undefined;\r\n\r\n    if (server.socket.readyState === server.socket.OPEN) {\r\n      const rand = Math.floor(Math.random() * 999999999);\r\n\r\n      return new Promise(async (resolve, reject) => {\r\n        CommandManager.add({\r\n          identifier,\r\n          command,\r\n          uniqueId: rand,\r\n          resolve,\r\n          reject,\r\n        });\r\n\r\n        server.socket.send(\r\n          JSON.stringify({\r\n            message: command,\r\n            identifier: rand,\r\n          })\r\n        );\r\n\r\n        this.logger.debug(\r\n          `[${identifier}] Sending Command: ${command} (ID: ${rand})`\r\n        );\r\n\r\n        const cmd = CommandManager.get(identifier, rand);\r\n        if (cmd) {\r\n          cmd.timeout = setTimeout(() => {\r\n            CommandManager.remove(cmd);\r\n            resolve(undefined);\r\n          }, 3_000);\r\n        }\r\n      });\r\n    } else {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Server With Identifier \"${identifier}\" Is Not Connected!`,\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroys the RCEManager instance, cleaning up all resources.\r\n   * Closes all server sockets, clears intervals, and removes all listeners.\r\n   */\r\n  public destroy(): void {\r\n    this.servers.forEach((server) => {\r\n      // Properly destroy the SocketManager to stop reconnection attempts\r\n      if (server.socketManager) {\r\n        server.socketManager.destroy();\r\n      }\r\n\r\n      if (server.socket) {\r\n        server.socket.close();\r\n      }\r\n      Object.values(server.intervals).forEach(clearInterval);\r\n    });\r\n    this.servers.clear();\r\n    this.removeAllListeners();\r\n    this.logger.info(\"RCEManager Successfully Destroyed!\");\r\n  }\r\n\r\n  /*\r\n    Event Handling\r\n  */\r\n  emit<K extends keyof IEvent>(\r\n    event: K,\r\n    ...args: IEvent[K] extends undefined ? [] : [IEvent[K]]\r\n  ): boolean {\r\n    return super.emit(event, ...args);\r\n  }\r\n\r\n  on<K extends keyof IEvent>(\r\n    event: K,\r\n    listener: (payload: IEvent[K]) => void\r\n  ): this {\r\n    return super.on(event, listener);\r\n  }\r\n\r\n  once<K extends keyof IEvent>(\r\n    event: K,\r\n    listener: (payload: IEvent[K]) => void\r\n  ): this {\r\n    return super.once(event, listener);\r\n  }\r\n\r\n  off<K extends keyof IEvent>(\r\n    event: K,\r\n    listener: (payload: IEvent[K]) => void\r\n  ): this {\r\n    return super.off(event, listener);\r\n  }\r\n\r\n  /*\r\n    Scheduled Tasks\r\n  */\r\n  private async updateBroadcasters(identifier: string): Promise<void> {\r\n    const server = this.getServer(identifier);\r\n    if (!server) {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Server With Identifier \"${identifier}\" Does Not Exist!`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const broadcasters = await this.sendCommand(\r\n      identifier,\r\n      \"rf.listboardcaster\"\r\n    );\r\n    if (broadcasters) {\r\n      const broadcasts = [];\r\n      const regex =\r\n        /\\[(\\d+) MHz\\] Position: \\(([\\d.-]+), ([\\d.-]+), ([\\d.-]+)\\), Range: (\\d+)/g;\r\n      let match;\r\n\r\n      while ((match = regex.exec(broadcasters)) !== null) {\r\n        const frequency = parseInt(match[1], 10);\r\n        const coordinates = [\r\n          parseFloat(match[2]),\r\n          parseFloat(match[3]),\r\n          parseFloat(match[4]),\r\n        ];\r\n        const range = parseInt(match[5], 10);\r\n\r\n        broadcasts.push({ frequency, coordinates, range });\r\n      }\r\n\r\n      server.frequencies.forEach((freq) => {\r\n        if (!broadcasts.find((b) => parseInt(b.frequency) === freq)) {\r\n          this.emit(RCEEvent.FrequencyLost, {\r\n            server,\r\n            frequency: freq,\r\n          });\r\n\r\n          server.frequencies = server.frequencies.filter((f) => f !== freq);\r\n        }\r\n      });\r\n\r\n      broadcasts.forEach((broadcast) => {\r\n        if (server.frequencies.includes(broadcast.frequency)) return;\r\n        server.frequencies.push(broadcast.frequency);\r\n\r\n        if (broadcast.frequency === 4765) {\r\n          this.emit(RCEEvent.EventStart, {\r\n            server,\r\n            event: \"Small Oil Rig\",\r\n            special: false,\r\n          });\r\n        } else if (broadcast.frequency === 4768) {\r\n          this.emit(RCEEvent.EventStart, {\r\n            server,\r\n            event: \"Oil Rig\",\r\n            special: false,\r\n          });\r\n        }\r\n\r\n        this.emit(RCEEvent.FrequencyGained, {\r\n          server,\r\n          frequency: broadcast.frequency,\r\n          coordinates: broadcast.coordinates,\r\n          range: broadcast.range,\r\n        });\r\n      });\r\n\r\n      this.updateServer(server);\r\n    }\r\n  }\r\n\r\n  private async fetchGibs(identifier: string): Promise<void> {\r\n    const server = this.getServer(identifier);\r\n    if (!server) {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Server With Identifier \"${identifier}\" Does Not Exist!`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const bradley = await this.sendCommand(\r\n      identifier,\r\n      \"find_entity servergibs_bradley\"\r\n    );\r\n    const helicopter = await this.sendCommand(\r\n      identifier,\r\n      \"find_entity servergibs_patrolhelicopter\"\r\n    );\r\n\r\n    if (!bradley || !helicopter) {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Failed To Fetch Gibs For Server \"${identifier}\"`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (\r\n      bradley.includes(\"servergibs_bradley\") &&\r\n      !server.flags.includes(\"BRADLEY\")\r\n    ) {\r\n      server.flags.push(\"BRADLEY\");\r\n\r\n      setTimeout(() => {\r\n        const s = this.getServer(identifier);\r\n        if (s) {\r\n          s.flags = s.flags.filter((f) => f !== \"BRADLEY\");\r\n          this.updateServer(s);\r\n        }\r\n      }, 60_000 * 10);\r\n\r\n      this.emit(RCEEvent.EventStart, {\r\n        server,\r\n        event: \"Bradley APC Debris\",\r\n        special: false,\r\n      });\r\n    }\r\n\r\n    if (\r\n      helicopter.includes(\"servergibs_patrolhelicopter\") &&\r\n      !server.flags.includes(\"HELICOPTER\")\r\n    ) {\r\n      server.flags.push(\"HELICOPTER\");\r\n\r\n      setTimeout(() => {\r\n        const s = this.getServer(identifier);\r\n        if (s) {\r\n          s.flags = s.flags.filter((f) => f !== \"HELICOPTER\");\r\n          this.updateServer(s);\r\n        }\r\n      }, 60_000 * 10);\r\n\r\n      this.emit(RCEEvent.EventStart, {\r\n        server,\r\n        event: \"Patrol Helicopter Debris\",\r\n        special: false,\r\n      });\r\n    }\r\n\r\n    this.updateServer(server);\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a placeholder player or returns existing one, optionally updating player data\r\n   * @param identifier Server identifier\r\n   * @param playerName Player's IGN\r\n   * @param playerData Optional data to set on the player\r\n   * @returns Player object (existing or newly created placeholder)\r\n   */\r\n  public getOrCreatePlayer(identifier: string, playerName: string, playerData?: Partial<Player>): Player {\r\n    const server = this.getServer(identifier);\r\n    if (!server) {\r\n      throw new Error(`Server with identifier \"${identifier}\" not found`);\r\n    }\r\n\r\n    let player = server.players.find(p => p.ign === playerName);\r\n    let isNewPlayer = false;\r\n    \r\n    if (!player) {\r\n      // Create placeholder player\r\n      player = {\r\n        ign: playerName,\r\n        ping: 0,\r\n        timeConnected: 0,\r\n        health: 0,\r\n        team: null,\r\n        platform: undefined\r\n      };\r\n      server.players.push(player);\r\n      isNewPlayer = true;\r\n    }\r\n\r\n    // Apply any provided data\r\n    if (playerData) {\r\n      Object.assign(player, playerData);\r\n    }\r\n\r\n    // Update server if we created a new player or modified existing data\r\n    if (isNewPlayer || playerData) {\r\n      this.updateServer(server);\r\n    }\r\n\r\n    return player;\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetches team information and updates team references for all players\r\n   * @param identifier Server identifier\r\n   */\r\n  public async fetchTeamInfo(identifier: string): Promise<void> {\r\n    const server = this.getServer(identifier);\r\n    if (!server) return;\r\n\r\n    const rawTeamInfo = await this.sendCommand(identifier, \"relationshipmanager.teaminfoall\");\r\n    if (!rawTeamInfo) return;\r\n\r\n    // Clear existing team references\r\n    server.players.forEach(player => {\r\n      player.team = null;\r\n    });\r\n\r\n    const { teams } = parseTeamInfo(rawTeamInfo, server.players);\r\n    \r\n    // Update teams list\r\n    server.teams = teams;\r\n    \r\n    this.updateServer(server);\r\n  }\r\n\r\n  /**\r\n   * Gets all teams on the server\r\n   * @param identifier Server identifier\r\n   * @returns Array of teams with their leaders and members\r\n   */\r\n  public getTeams(identifier: string): Team[] {\r\n    const server = this.getServer(identifier);\r\n    return server ? server.teams : [];\r\n  }\r\n\r\n  /**\r\n   * Gets a specific team by ID\r\n   * @param identifier Server identifier\r\n   * @param teamId Team ID to find\r\n   * @returns Team object or undefined if not found\r\n   */\r\n  public getTeam(identifier: string, teamId: number): Team | undefined {\r\n    const server = this.getServer(identifier);\r\n    return server ? server.teams.find(team => team.id === teamId) : undefined;\r\n  }\r\n\r\n  /**\r\n   * Gets the team that a specific player belongs to\r\n   * @param identifier Server identifier\r\n   * @param playerName Player's IGN\r\n   * @returns Team object or undefined if player is not in a team\r\n   */\r\n  public getPlayerTeam(identifier: string, playerName: string): Team | undefined {\r\n    const server = this.getServer(identifier);\r\n    if (!server) return undefined;\r\n\r\n    const player = server.players.find(p => p.ign === playerName);\r\n    return player?.team || undefined;\r\n  }\r\n\r\n  private async updatePlayers(identifier: string): Promise<void> {\r\n    const server = this.getServer(identifier);\r\n    if (!server) {\r\n      this.emit(RCEEvent.Error, {\r\n        error: `Server With Identifier \"${identifier}\" Does Not Exist!`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const rawPlayerList = await this.sendCommand(identifier, \"playerlist\");\r\n\r\n    if (rawPlayerList) {\r\n      const parsedPlayers: any[] = JSON.parse(rawPlayerList);\r\n      \r\n      // Update existing players with new data, preserve team and platform references\r\n      const existingPlayers = server.players;\r\n      const existingPlayerNames = new Set(existingPlayers.map(p => p.ign));\r\n      const newPlayerNames = new Set(parsedPlayers.map((p: any) => p.DisplayName));\r\n      \r\n      const joined: Player[] = [];\r\n      const left = existingPlayers.filter(player => !newPlayerNames.has(player.ign));\r\n\r\n      // Update existing players and identify new ones\r\n      parsedPlayers.forEach((playerData: any) => {\r\n        const playerName = playerData.DisplayName;\r\n        const existingPlayer = existingPlayers.find(p => p.ign === playerName);\r\n        \r\n        if (existingPlayer) {\r\n          // Update existing player data but preserve team and platform references\r\n          existingPlayer.ping = playerData.Ping;\r\n          existingPlayer.timeConnected = playerData.ConnectedSeconds;\r\n          existingPlayer.health = Math.round(playerData.Health);\r\n          // team and platform are preserved from existing player\r\n        } else {\r\n          // Create new player with default values\r\n          const newPlayer: Player = {\r\n            ign: playerName,\r\n            ping: playerData.Ping,\r\n            timeConnected: playerData.ConnectedSeconds,\r\n            health: Math.round(playerData.Health),\r\n            team: null, // Will be set by team events or connection\r\n            platform: undefined, // Will be set from respawn events\r\n          };\r\n          joined.push(newPlayer);\r\n          existingPlayers.push(newPlayer);\r\n        }\r\n      });\r\n\r\n      // Remove players that are no longer connected\r\n      left.forEach(player => {\r\n        const index = existingPlayers.indexOf(player);\r\n        if (index > -1) {\r\n          existingPlayers.splice(index, 1);\r\n        }\r\n      });\r\n\r\n      // Emit events for joined players\r\n      joined.forEach(player => {\r\n        this.emit(RCEEvent.PlayerJoined, {\r\n          server,\r\n          player,\r\n        });\r\n      });\r\n\r\n      // Emit events for left players\r\n      left.forEach(player => {\r\n        this.emit(RCEEvent.PlayerLeft, {\r\n          server,\r\n          player,\r\n        });\r\n      });\r\n\r\n      this.updateServer(server);\r\n\r\n      this.emit(RCEEvent.PlayerListUpdated, {\r\n        server,\r\n        players: existingPlayers,\r\n        joined,\r\n        left,\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}