{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAqPA,IAAY,QAgCX;AAhCD,WAAY,QAAQ;IAClB,2BAAe,CAAA;IACf,+BAAmB,CAAA;IACnB,iDAAqC,CAAA;IACrC,qDAAyC,CAAA;IACzC,mCAAuB,CAAA;IACvB,2CAA+B,CAAA;IAC/B,+CAAmC,CAAA;IACnC,mDAAuC,CAAA;IACvC,mDAAuC,CAAA;IACvC,2CAA+B,CAAA;IAC/B,iDAAqC,CAAA;IACrC,yCAA6B,CAAA;IAC7B,6CAAiC,CAAA;IACjC,mCAAuB,CAAA;IACvB,iCAAqB,CAAA;IACrB,uCAA2B,CAAA;IAC3B,iCAAqB,CAAA;IACrB,mCAAuB,CAAA;IACvB,qCAAyB,CAAA;IACzB,iDAAqC,CAAA;IACrC,yCAA6B,CAAA;IAC7B,iCAAqB,CAAA;IACrB,yCAA6B,CAAA;IAC7B,qCAAyB,CAAA;IACzB,qCAAyB,CAAA;IACzB,qCAAyB,CAAA;IACzB,mDAAuC,CAAA;IACvC,+CAAmC,CAAA;IACnC,2CAA+B,CAAA;IAC/B,yCAA6B,CAAA;IAC7B,2BAAe,CAAA;AACjB,CAAC,EAhCW,QAAQ,wBAAR,QAAQ,QAgCnB;AAoDD,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,kCAAkB,CAAA;IAClB,4BAAY,CAAA;AACd,CAAC,EAHW,YAAY,4BAAZ,YAAY,QAGvB;AAED,IAAY,QAMX;AAND,WAAY,QAAQ;IAClB,yBAAa,CAAA;IACb,uBAAW,CAAA;IACX,mCAAuB,CAAA;IACvB,2BAAe,CAAA;IACf,2BAAe,CAAA;AACjB,CAAC,EANW,QAAQ,wBAAR,QAAQ,QAMnB;AA8BD,IAAY,QAMX;AAND,WAAY,QAAQ;IAClB,uCAAQ,CAAA;IACR,yCAAS,CAAA;IACT,uCAAQ,CAAA;IACR,uCAAQ,CAAA;IACR,yCAAS,CAAA;AACX,CAAC,EANW,QAAQ,wBAAR,QAAQ,QAMnB","sourcesContent":["import type { WebSocket } from \"ws\";\nimport { type PlayerKillType } from \"./data/playerKill\";\nimport { QuickChat, QuickChatChannel } from \"./data/quickChat\";\nimport SocketManager from \"./socket/socketManager\";\n\nexport interface IOptions {\n  logger: {\n    level?: LogLevel;\n    instance?: ILogger;\n    file?: string;\n  };\n}\n\n/*\n  Servers\n*/\ninterface IServerRCON {\n  host: string;\n  port: number;\n  password: string;\n}\n\nexport interface IServerOptions {\n  identifier: string;\n  rcon: IServerRCON;\n  state: any[];\n  reconnection?: {\n    enabled?: boolean;\n    interval?: number; // in milliseconds, default 5000\n    maxAttempts?: number; // -1 for infinite, default -1\n  };\n}\n\ninterface IServerIntervals {\n  playerRefreshing: NodeJS.Timeout;\n  frequencyRefreshing: NodeJS.Timeout;\n  gibRefreshing: NodeJS.Timeout;\n}\n\nexport interface IServer {\n  identifier: string;\n  socket: WebSocket;\n  socketManager?: SocketManager; // Reference to SocketManager for proper cleanup\n  flags: string[];\n  intervals: IServerIntervals;\n  state: any[];\n  players: IPlayer[];\n  frequencies: number[];\n  teams: ITeam[];\n}\n\nexport interface IRustServerInformation {\n  Hostname: string;\n  MaxPlayers: number;\n  Players: number;\n  Queued: number;\n  Joining: number;\n  EntityCount: number;\n  GameTime: string;\n  Uptime: number;\n  Map: \"Procedural Map\";\n  Framerate: number;\n  Memory: number;\n  Collections: number;\n  NetworkIn: number;\n  NetworkOut: number;\n  Restarting: boolean;\n  SaveCreatedTime: string;\n}\n\n/*\n  Events\n*/\ninterface EventPayload {\n  server: IServer;\n}\n\nexport interface IReadyEventPayload extends EventPayload {}\n\nexport interface IMessageEventPayload extends EventPayload {\n  message: string;\n}\n\nexport interface IExecutingCommandEventPayload extends EventPayload {\n  command: string;\n}\n\nexport interface IVendingMachineNameEventPayload extends EventPayload {\n  player: IPlayer;\n  oldName: string;\n  newName: string;\n}\n\nexport interface IQuickChatEventPayload extends EventPayload {\n  type: QuickChatChannel;\n  player: IPlayer;\n  message: QuickChat;\n}\n\nexport interface IPlayerSuicideEventPayload extends EventPayload {\n  player: IPlayer;\n}\n\nexport interface IPlayerRespawnedEventPayload extends EventPayload {\n  player: IPlayer;\n  platform: GamePlatform;\n}\n\nexport interface ICustomZoneCreatedEventPayload extends EventPayload {\n  zone: string;\n}\n\nexport interface ICustomZoneRemovedEventPayload extends EventPayload {\n  zone: string;\n}\n\nexport interface IPlayerRoleAddEventPayload extends EventPayload {\n  admin?: IPlayer;\n  player: IPlayer;\n  role: string;\n}\n\nexport interface IPlayerRoleRemoveEventPayload extends EventPayload {\n  admin?: IPlayer;\n  player: IPlayer;\n  role: string;\n}\n\nexport interface IPlayerBannedEventPayload extends EventPayload {\n  admin?: IPlayer;\n  player: IPlayer;\n}\nexport interface IPlayerUnbannedEventPayload extends EventPayload {\n  admin?: IPlayer;\n  player: IPlayer;\n}\n\nexport interface IIitemSpawnEventPayload extends EventPayload {\n  player: IPlayer;\n  item: string;\n  quantity: number;\n}\n\nexport interface INoteEditEventPayload extends EventPayload {\n  player: IPlayer;\n  oldContent: string;\n  newContent: string;\n}\n\nexport interface ITeamCreatedEventPayload extends EventPayload {\n  team: ITeam;\n}\n\nexport interface ITeamJoinEventPayload extends EventPayload {\n  team: ITeam;\n  player: IPlayer;\n}\n\nexport interface ITeamLeaveEventPayload extends EventPayload {\n  team: ITeam;\n  player: IPlayer;\n}\n\nexport interface ITeamInviteEventPayload extends EventPayload {\n  team: ITeam;\n  player: IPlayer;\n}\n\nexport interface ITeamInviteCancelEventPayload extends EventPayload {\n  team: ITeam;\n  player: IPlayer;\n}\n\nexport interface ITeamPromotedEventPayload extends EventPayload {\n  team: ITeam;\n  oldOwner: IPlayer;\n  newOwner: IPlayer;\n}\n\nexport interface IKitSpawnEventPayload extends EventPayload {\n  player: IPlayer;\n  admin?: IPlayer;\n  kit: string;\n}\n\nexport interface IPlayerJoinedEventPayload extends EventPayload {\n  player: IPlayer;\n}\n\nexport interface IPlayerLeftEventPayload extends EventPayload {\n  player: IPlayer;\n}\n\nexport interface IEventStartEventPayload extends EventPayload {\n  event:\n    | \"Airdrop\"\n    | \"Cargo Ship\"\n    | \"Chinook\"\n    | \"Patrol Helicopter\"\n    | \"Halloween\"\n    | \"Christmas\"\n    | \"Small Oil Rig\"\n    | \"Oil Rig\"\n    | \"Bradley APC Debris\"\n    | \"Patrol Helicopter Debris\";\n  special: boolean;\n}\n\nexport interface IPlayerKillEVentPayload extends EventPayload {\n  victim: IKillPlayer;\n  killer: IKillPlayer;\n}\n\nexport interface IPlayerListUpdatedEventPayload extends EventPayload {\n  players: IPlayer[];\n  joined: IPlayer[];\n  left: IPlayer[];\n}\n\nexport interface IFrequencyGainedEventPayload extends EventPayload {\n  frequency: number;\n  coordinates: number[];\n  range: number;\n}\n\nexport interface IFrequencyLostEventPayload extends EventPayload {\n  frequency: number;\n}\n\nexport interface IServerSavingEventPayload extends EventPayload {\n  entities: number;\n}\n\nexport interface IErrorEventPayload {\n  server?: IServer;\n  error: string;\n}\n\nexport interface IKillPlayer {\n  id: string;\n  name: string;\n  type: PlayerKillType;\n  player?: IPlayer;\n}\n\nexport enum RCEEvent {\n  Ready = \"ready\",\n  Message = \"message\",\n  ExecutingCommand = \"executingCommand\",\n  VendingMachineName = \"vendingMachineName\",\n  QuickChat = \"quickChat\",\n  PlayerSuicide = \"playerSuicide\",\n  PlayerRespawned = \"playerRespawned\",\n  CustomZoneCreated = \"customZoneCreated\",\n  CustomZoneRemoved = \"customZoneRemoved\",\n  PlayerRoleAdd = \"playerRoleAdd\",\n  PlayerRoleRemove = \"playerRoleRemove\",\n  PlayerBanned = \"playerBanned\",\n  PlayerUnbanned = \"playerUnbanned\",\n  ItemSpawn = \"itemSpawn\",\n  NoteEdit = \"noteEdit\",\n  TeamCreated = \"teamCreated\",\n  TeamJoin = \"teamJoin\",\n  TeamLeave = \"teamLeave\",\n  TeamInvite = \"teamInvite\",\n  TeamInviteCancel = \"teamInviteCancel\",\n  TeamPromoted = \"teamPromoted\",\n  KitSpawn = \"kitSpawn\",\n  PlayerJoined = \"playerJoined\",\n  PlayerLeft = \"playerLeft\",\n  EventStart = \"eventStart\",\n  PlayerKill = \"playerKill\",\n  PlayerListUpdated = \"playerListUpdated\",\n  FrequencyGained = \"frequencyGained\",\n  FrequencyLost = \"frequencyLost\",\n  ServerSaving = \"serverSaving\",\n  Error = \"error\",\n}\n\nexport interface IPlayer {\n  ign: string;\n  ping: number;\n  timeConnected: number;\n  health: number;\n  team?: ITeam | null;\n  platform?: GamePlatform;\n  role?: GameRole;\n}\n\nexport interface ITeam {\n  id: number;\n  leader: IPlayer;\n  members: IPlayer[];\n}\n\nexport interface IEvent {\n  [RCEEvent.Ready]: IReadyEventPayload;\n  [RCEEvent.Message]: IMessageEventPayload;\n  [RCEEvent.ExecutingCommand]: IExecutingCommandEventPayload;\n  [RCEEvent.VendingMachineName]: IVendingMachineNameEventPayload;\n  [RCEEvent.QuickChat]: IQuickChatEventPayload;\n  [RCEEvent.PlayerSuicide]: IPlayerSuicideEventPayload;\n  [RCEEvent.PlayerRespawned]: IPlayerRespawnedEventPayload;\n  [RCEEvent.CustomZoneCreated]: ICustomZoneCreatedEventPayload;\n  [RCEEvent.CustomZoneRemoved]: ICustomZoneRemovedEventPayload;\n  [RCEEvent.PlayerRoleAdd]: IPlayerRoleAddEventPayload;\n  [RCEEvent.PlayerRoleRemove]: IPlayerRoleRemoveEventPayload;\n  [RCEEvent.PlayerBanned]: IPlayerBannedEventPayload;\n  [RCEEvent.PlayerUnbanned]: IPlayerUnbannedEventPayload;\n  [RCEEvent.ItemSpawn]: IIitemSpawnEventPayload;\n  [RCEEvent.NoteEdit]: INoteEditEventPayload;\n  [RCEEvent.TeamCreated]: ITeamCreatedEventPayload;\n  [RCEEvent.TeamJoin]: ITeamJoinEventPayload;\n  [RCEEvent.TeamLeave]: ITeamLeaveEventPayload;\n  [RCEEvent.TeamInvite]: ITeamInviteEventPayload;\n  [RCEEvent.TeamInviteCancel]: ITeamInviteCancelEventPayload;\n  [RCEEvent.TeamPromoted]: ITeamPromotedEventPayload;\n  [RCEEvent.KitSpawn]: IKitSpawnEventPayload;\n  [RCEEvent.PlayerJoined]: IPlayerJoinedEventPayload;\n  [RCEEvent.PlayerLeft]: IPlayerLeftEventPayload;\n  [RCEEvent.EventStart]: IEventStartEventPayload;\n  [RCEEvent.PlayerKill]: IPlayerKillEVentPayload;\n  [RCEEvent.PlayerListUpdated]: IPlayerListUpdatedEventPayload;\n  [RCEEvent.FrequencyGained]: IFrequencyGainedEventPayload;\n  [RCEEvent.FrequencyLost]: IFrequencyLostEventPayload;\n  [RCEEvent.ServerSaving]: IServerSavingEventPayload;\n  [RCEEvent.Error]: IErrorEventPayload;\n}\n\nexport enum GamePlatform {\n  Playstation = \"PS\",\n  XBOX = \"XBL\",\n}\n\nexport enum GameRole {\n  None = \"None\",\n  VIP = \"VIP\",\n  Moderator = \"Moderator\",\n  Admin = \"Admin\",\n  Owner = \"Owner\",\n}\n\n/*\n  Command Handling\n*/\nexport interface ICommandRequest {\n  identifier: string;\n  command: string;\n  uniqueId?: number;\n  resolve: (value: string) => void;\n  reject: (reason?: any) => void;\n  timeout?: ReturnType<typeof setTimeout>;\n}\n\n/*\n  Logger\n*/\nexport interface ILogger {\n  error: (message: string) => void;\n  warn: (message: string) => void;\n  info: (message: string) => void;\n  debug: (message: string) => void;\n}\n\nexport interface ILogType {\n  prefix: string;\n  emoji: string;\n  color: string;\n}\n\nexport enum LogLevel {\n  None = 0,\n  Error = 1,\n  Warn = 2,\n  Info = 3,\n  Debug = 4,\n}\n"]}