{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAqPA,IAAY,QAgCX;AAhCD,WAAY,QAAQ;IAClB,2BAAe,CAAA;IACf,+BAAmB,CAAA;IACnB,iDAAqC,CAAA;IACrC,qDAAyC,CAAA;IACzC,mCAAuB,CAAA;IACvB,2CAA+B,CAAA;IAC/B,+CAAmC,CAAA;IACnC,mDAAuC,CAAA;IACvC,mDAAuC,CAAA;IACvC,2CAA+B,CAAA;IAC/B,iDAAqC,CAAA;IACrC,yCAA6B,CAAA;IAC7B,6CAAiC,CAAA;IACjC,mCAAuB,CAAA;IACvB,iCAAqB,CAAA;IACrB,uCAA2B,CAAA;IAC3B,iCAAqB,CAAA;IACrB,mCAAuB,CAAA;IACvB,qCAAyB,CAAA;IACzB,iDAAqC,CAAA;IACrC,yCAA6B,CAAA;IAC7B,iCAAqB,CAAA;IACrB,yCAA6B,CAAA;IAC7B,qCAAyB,CAAA;IACzB,qCAAyB,CAAA;IACzB,qCAAyB,CAAA;IACzB,mDAAuC,CAAA;IACvC,+CAAmC,CAAA;IACnC,2CAA+B,CAAA;IAC/B,yCAA6B,CAAA;IAC7B,2BAAe,CAAA;AACjB,CAAC,EAhCW,QAAQ,wBAAR,QAAQ,QAgCnB;AAmDD,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,kCAAkB,CAAA;IAClB,4BAAY,CAAA;AACd,CAAC,EAHW,YAAY,4BAAZ,YAAY,QAGvB;AA8BD,IAAY,QAMX;AAND,WAAY,QAAQ;IAClB,uCAAQ,CAAA;IACR,yCAAS,CAAA;IACT,uCAAQ,CAAA;IACR,uCAAQ,CAAA;IACR,yCAAS,CAAA;AACX,CAAC,EANW,QAAQ,wBAAR,QAAQ,QAMnB","sourcesContent":["import type { WebSocket } from \"ws\";\r\nimport { type PlayerKillType } from \"./data/playerKill\";\r\nimport { QuickChat, QuickChatChannel } from \"./data/quickChat\";\r\nimport SocketManager from \"./socket/socketManager\";\r\n\r\nexport interface IOptions {\r\n  logger: {\r\n    level?: LogLevel;\r\n    instance?: ILogger;\r\n    file?: string;\r\n  };\r\n}\r\n\r\n/*\r\n  Servers\r\n*/\r\ninterface IServerRCON {\r\n  host: string;\r\n  port: number;\r\n  password: string;\r\n}\r\n\r\nexport interface IServerOptions {\r\n  identifier: string;\r\n  rcon: IServerRCON;\r\n  state: any[];\r\n  reconnection?: {\r\n    enabled?: boolean;\r\n    interval?: number; // in milliseconds, default 5000\r\n    maxAttempts?: number; // -1 for infinite, default -1\r\n  };\r\n}\r\n\r\ninterface IServerIntervals {\r\n  playerRefreshing: NodeJS.Timeout;\r\n  frequencyRefreshing: NodeJS.Timeout;\r\n  gibRefreshing: NodeJS.Timeout;\r\n}\r\n\r\nexport interface IServer {\r\n  identifier: string;\r\n  socket: WebSocket;\r\n  socketManager?: SocketManager; // Reference to SocketManager for proper cleanup\r\n  flags: string[];\r\n  intervals: IServerIntervals;\r\n  state: any[];\r\n  players: Player[];\r\n  frequencies: number[];\r\n  teams: Team[];\r\n}\r\n\r\nexport interface IRustServerInformation {\r\n  Hostname: string;\r\n  MaxPlayers: number;\r\n  Players: number;\r\n  Queued: number;\r\n  Joining: number;\r\n  EntityCount: number;\r\n  GameTime: string;\r\n  Uptime: number;\r\n  Map: \"Procedural Map\";\r\n  Framerate: number;\r\n  Memory: number;\r\n  Collections: number;\r\n  NetworkIn: number;\r\n  NetworkOut: number;\r\n  Restarting: boolean;\r\n  SaveCreatedTime: string;\r\n}\r\n\r\n/*\r\n  Events\r\n*/\r\ninterface EventPayload {\r\n  server: IServer;\r\n}\r\n\r\nexport interface IReadyEventPayload extends EventPayload {}\r\n\r\nexport interface IMessageEventPayload extends EventPayload {\r\n  message: string;\r\n}\r\n\r\nexport interface IExecutingCommandEventPayload extends EventPayload {\r\n  command: string;\r\n}\r\n\r\nexport interface IVendingMachineNameEventPayload extends EventPayload {\r\n  player: Player;\r\n  oldName: string;\r\n  newName: string;\r\n}\r\n\r\nexport interface IQuickChatEventPayload extends EventPayload {\r\n  type: QuickChatChannel;\r\n  player: Player;\r\n  message: QuickChat;\r\n}\r\n\r\nexport interface IPlayerSuicideEventPayload extends EventPayload {\r\n  player: Player;\r\n}\r\n\r\nexport interface IPlayerRespawnedEventPayload extends EventPayload {\r\n  player: Player;\r\n  platform: GamePlatform;\r\n}\r\n\r\nexport interface ICustomZoneCreatedEventPayload extends EventPayload {\r\n  zone: string;\r\n}\r\n\r\nexport interface ICustomZoneRemovedEventPayload extends EventPayload {\r\n  zone: string;\r\n}\r\n\r\nexport interface IPlayerRoleAddEventPayload extends EventPayload {\r\n  admin?: string;\r\n  ign: string;\r\n  role: string;\r\n}\r\n\r\nexport interface IPlayerRoleRemoveEventPayload extends EventPayload {\r\n  admin?: string;\r\n  ign: string;\r\n  role: string;\r\n}\r\n\r\nexport interface IPlayerBannedEventPayload extends EventPayload {\r\n  admin?: string;\r\n  ign: string;\r\n}\r\nexport interface IPlayerUnbannedEventPayload extends EventPayload {\r\n  admin?: string;\r\n  ign: string;\r\n}\r\n\r\nexport interface IIitemSpawnEventPayload extends EventPayload {\r\n  player: Player;\r\n  item: string;\r\n  quantity: number;\r\n}\r\n\r\nexport interface INoteEditEventPayload extends EventPayload {\r\n  player: Player;\r\n  oldContent: string;\r\n  newContent: string;\r\n}\r\n\r\nexport interface ITeamCreatedEventPayload extends EventPayload {\r\n  team: Team;\r\n}\r\n\r\nexport interface ITeamJoinEventPayload extends EventPayload {\r\n  team: Team;\r\n  player: Player;\r\n}\r\n\r\nexport interface ITeamLeaveEventPayload extends EventPayload {\r\n  team: Team;\r\n  player: Player;\r\n}\r\n\r\nexport interface ITeamInviteEventPayload extends EventPayload {\r\n  team: Team;\r\n  player: Player;\r\n}\r\n\r\nexport interface ITeamInviteCancelEventPayload extends EventPayload {\r\n  id: number;\r\n  owner: Player;\r\n  ign: string;\r\n}\r\n\r\nexport interface ITeamPromotedEventPayload extends EventPayload {\r\n  team: Team;\r\n  oldOwner: Player;\r\n  newOwner: Player;\r\n}\r\n\r\nexport interface IKitSpawnEventPayload extends EventPayload {\r\n  ign: string;\r\n  admin?: string;\r\n  kit: string;\r\n}\r\n\r\nexport interface IPlayerJoinedEventPayload extends EventPayload {\r\n  player: Player;\r\n}\r\n\r\nexport interface IPlayerLeftEventPayload extends EventPayload {\r\n  player: Player;\r\n}\r\n\r\nexport interface IEventStartEventPayload extends EventPayload {\r\n  event:\r\n    | \"Airdrop\"\r\n    | \"Cargo Ship\"\r\n    | \"Chinook\"\r\n    | \"Patrol Helicopter\"\r\n    | \"Halloween\"\r\n    | \"Christmas\"\r\n    | \"Small Oil Rig\"\r\n    | \"Oil Rig\"\r\n    | \"Bradley APC Debris\"\r\n    | \"Patrol Helicopter Debris\";\r\n  special: boolean;\r\n}\r\n\r\nexport interface IPlayerKillEVentPayload extends EventPayload {\r\n  victim: IKillPlayer;\r\n  killer: IKillPlayer;\r\n}\r\n\r\nexport interface IPlayerListUpdatedEventPayload extends EventPayload {\r\n  players: Player[];\r\n  joined: Player[];\r\n  left: Player[];\r\n}\r\n\r\nexport interface IFrequencyGainedEventPayload extends EventPayload {\r\n  frequency: number;\r\n  coordinates: number[];\r\n  range: number;\r\n}\r\n\r\nexport interface IFrequencyLostEventPayload extends EventPayload {\r\n  frequency: number;\r\n}\r\n\r\nexport interface IServerSavingEventPayload extends EventPayload {\r\n  entities: number;\r\n}\r\n\r\nexport interface IErrorEventPayload {\r\n  server?: IServer;\r\n  error: string;\r\n}\r\n\r\nexport interface IKillPlayer {\r\n  id: string;\r\n  name: string;\r\n  type: PlayerKillType;\r\n}\r\n\r\nexport enum RCEEvent {\r\n  Ready = \"ready\",\r\n  Message = \"message\",\r\n  ExecutingCommand = \"executingCommand\",\r\n  VendingMachineName = \"vendingMachineName\",\r\n  QuickChat = \"quickChat\",\r\n  PlayerSuicide = \"playerSuicide\",\r\n  PlayerRespawned = \"playerRespawned\",\r\n  CustomZoneCreated = \"customZoneCreated\",\r\n  CustomZoneRemoved = \"customZoneRemoved\",\r\n  PlayerRoleAdd = \"playerRoleAdd\",\r\n  PlayerRoleRemove = \"playerRoleRemove\",\r\n  PlayerBanned = \"playerBanned\",\r\n  PlayerUnbanned = \"playerUnbanned\",\r\n  ItemSpawn = \"itemSpawn\",\r\n  NoteEdit = \"noteEdit\",\r\n  TeamCreated = \"teamCreated\",\r\n  TeamJoin = \"teamJoin\",\r\n  TeamLeave = \"teamLeave\",\r\n  TeamInvite = \"teamInvite\",\r\n  TeamInviteCancel = \"teamInviteCancel\",\r\n  TeamPromoted = \"teamPromoted\",\r\n  KitSpawn = \"kitSpawn\",\r\n  PlayerJoined = \"playerJoined\",\r\n  PlayerLeft = \"playerLeft\",\r\n  EventStart = \"eventStart\",\r\n  PlayerKill = \"playerKill\",\r\n  PlayerListUpdated = \"playerListUpdated\",\r\n  FrequencyGained = \"frequencyGained\",\r\n  FrequencyLost = \"frequencyLost\",\r\n  ServerSaving = \"serverSaving\",\r\n  Error = \"error\",\r\n}\r\n\r\nexport interface Player {\r\n  ign: string;\r\n  ping: number;\r\n  timeConnected: number;\r\n  health: number;\r\n  team?: Team | null;\r\n  platform?: GamePlatform;\r\n}\r\n\r\nexport interface Team {\r\n  id: number;\r\n  leader: Player;\r\n  members: Player[];\r\n}\r\n\r\nexport interface IEvent {\r\n  [RCEEvent.Ready]: IReadyEventPayload;\r\n  [RCEEvent.Message]: IMessageEventPayload;\r\n  [RCEEvent.ExecutingCommand]: IExecutingCommandEventPayload;\r\n  [RCEEvent.VendingMachineName]: IVendingMachineNameEventPayload;\r\n  [RCEEvent.QuickChat]: IQuickChatEventPayload;\r\n  [RCEEvent.PlayerSuicide]: IPlayerSuicideEventPayload;\r\n  [RCEEvent.PlayerRespawned]: IPlayerRespawnedEventPayload;\r\n  [RCEEvent.CustomZoneCreated]: ICustomZoneCreatedEventPayload;\r\n  [RCEEvent.CustomZoneRemoved]: ICustomZoneRemovedEventPayload;\r\n  [RCEEvent.PlayerRoleAdd]: IPlayerRoleAddEventPayload;\r\n  [RCEEvent.PlayerRoleRemove]: IPlayerRoleRemoveEventPayload;\r\n  [RCEEvent.PlayerBanned]: IPlayerBannedEventPayload;\r\n  [RCEEvent.PlayerUnbanned]: IPlayerUnbannedEventPayload;\r\n  [RCEEvent.ItemSpawn]: IIitemSpawnEventPayload;\r\n  [RCEEvent.NoteEdit]: INoteEditEventPayload;\r\n  [RCEEvent.TeamCreated]: ITeamCreatedEventPayload;\r\n  [RCEEvent.TeamJoin]: ITeamJoinEventPayload;\r\n  [RCEEvent.TeamLeave]: ITeamLeaveEventPayload;\r\n  [RCEEvent.TeamInvite]: ITeamInviteEventPayload;\r\n  [RCEEvent.TeamInviteCancel]: ITeamInviteCancelEventPayload;\r\n  [RCEEvent.TeamPromoted]: ITeamPromotedEventPayload;\r\n  [RCEEvent.KitSpawn]: IKitSpawnEventPayload;\r\n  [RCEEvent.PlayerJoined]: IPlayerJoinedEventPayload;\r\n  [RCEEvent.PlayerLeft]: IPlayerLeftEventPayload;\r\n  [RCEEvent.EventStart]: IEventStartEventPayload;\r\n  [RCEEvent.PlayerKill]: IPlayerKillEVentPayload;\r\n  [RCEEvent.PlayerListUpdated]: IPlayerListUpdatedEventPayload;\r\n  [RCEEvent.FrequencyGained]: IFrequencyGainedEventPayload;\r\n  [RCEEvent.FrequencyLost]: IFrequencyLostEventPayload;\r\n  [RCEEvent.ServerSaving]: IServerSavingEventPayload;\r\n  [RCEEvent.Error]: IErrorEventPayload;\r\n}\r\n\r\nexport enum GamePlatform {\r\n  Playstation = \"PS\",\r\n  XBOX = \"XBL\",\r\n}\r\n\r\n/*\r\n  Command Handling\r\n*/\r\nexport interface ICommandRequest {\r\n  identifier: string;\r\n  command: string;\r\n  uniqueId?: number;\r\n  resolve: (value: string) => void;\r\n  reject: (reason?: any) => void;\r\n  timeout?: ReturnType<typeof setTimeout>;\r\n}\r\n\r\n/*\r\n  Logger\r\n*/\r\nexport interface ILogger {\r\n  error: (message: string) => void;\r\n  warn: (message: string) => void;\r\n  info: (message: string) => void;\r\n  debug: (message: string) => void;\r\n}\r\n\r\nexport interface ILogType {\r\n  prefix: string;\r\n  emoji: string;\r\n  color: string;\r\n}\r\n\r\nexport enum LogLevel {\r\n  None = 0,\r\n  Error = 1,\r\n  Warn = 2,\r\n  Info = 3,\r\n  Debug = 4,\r\n}\r\n"]}