{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { LogLevel } from \"./types\";\r\nimport type { ILogger, ILogType } from \"./types\";\r\nimport { inspect } from \"util\";\r\nimport { stat, appendFile, writeFile } from \"fs\";\r\n\r\nenum ConsoleColor {\r\n  Reset = \"\\x1b[0m\",\r\n  FgRed = \"\\x1b[31m\",\r\n  FgGreen = \"\\x1b[32m\",\r\n  FgYellow = \"\\x1b[33m\",\r\n  FgCyan = \"\\x1b[36m\",\r\n}\r\n\r\nexport default class Logger implements ILogger {\r\n  private logLevel: LogLevel = LogLevel.Info;\r\n  private file?: string;\r\n\r\n  constructor(logLevel: LogLevel = LogLevel.Info, file?: string) {\r\n    this.logLevel = logLevel;\r\n    this.file = file;\r\n  }\r\n\r\n  private format(content: any): string {\r\n    return typeof content === \"string\"\r\n      ? content\r\n      : inspect(content, { depth: 5 });\r\n  }\r\n\r\n  private logToFile(type: string, message: string) {\r\n    if (this.file) {\r\n      stat(this.file, (err, stats) => {\r\n        if (err) {\r\n          writeFile(this.file, \"\", (err) => {\r\n            if (err) {\r\n              this.warn(`Failed To Create Log File: ${err.message}`);\r\n            }\r\n          });\r\n        }\r\n\r\n        if (stats.size > 300 * 1024 * 1024) {\r\n          writeFile(this.file, \"\", (err) => {\r\n            if (err) {\r\n              this.warn(`Failed To Clear Log File: ${err.message}`);\r\n            }\r\n          });\r\n        }\r\n\r\n        const log =\r\n          typeof message === \"string\"\r\n            ? `[${type.toUpperCase()}]: ${message}\\n`\r\n            : `[${type.toUpperCase()}]: ${inspect(message, { depth: 5 })}\\n`;\r\n\r\n        appendFile(this.file, log, (err) => {\r\n          if (err) {\r\n            this.warn(`Failed To Write To Log File: ${err.message}`);\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  private log(level: LogLevel, logType: ILogType, message: string) {\r\n    this.logToFile(logType.prefix, message);\r\n\r\n    if (this.logLevel !== LogLevel.None && level <= this.logLevel) {\r\n      const date = new Date();\r\n      const timestamp = date.toLocaleTimeString([], { hour12: false });\r\n      const padding = \" \".repeat(Math.max(0, 15 - logType.prefix.length));\r\n      const formattedMessage = `\\x1b[90m[${timestamp}]\\x1b[0m ${logType.color}${logType.prefix}${padding}${logType.emoji}${ConsoleColor.Reset}`;\r\n\r\n      console.log(formattedMessage, this.format(message));\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param message - The message to log\r\n   * @description Logs a message with the [DEBUG] prefix\r\n   *\r\n   * @example\r\n   * ```js\r\n   * manager.logger.debug(\"Hello, World!\");\r\n   * ```\r\n   */\r\n  debug(message: string) {\r\n    const logType: ILogType = {\r\n      prefix: \"[DEBUG]\",\r\n      emoji: \"🔧\",\r\n      color: ConsoleColor.FgGreen,\r\n    };\r\n\r\n    this.log(LogLevel.Debug, logType, message);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param message - The message to log\r\n   * @description Logs a message with the [ERROR] prefix\r\n   *\r\n   * @example\r\n   * ```js\r\n   * manager.logger.error(\"An error occurred!\");\r\n   * ```\r\n   */\r\n  error(message: string) {\r\n    const logType: ILogType = {\r\n      prefix: \"[ERROR]\",\r\n      emoji: \"❌\",\r\n      color: ConsoleColor.FgRed,\r\n    };\r\n\r\n    this.log(LogLevel.Error, logType, message);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param message - The message to log\r\n   * @description Logs a message with the [INFO] prefix\r\n   *\r\n   * @example\r\n   * ```js\r\n   * manager.logger.info(\"Hello, World!\");\r\n   * ```\r\n   */\r\n  info(message: string) {\r\n    const logType: ILogType = {\r\n      prefix: \"[INFO]\",\r\n      emoji: \"💬\",\r\n      color: ConsoleColor.FgCyan,\r\n    };\r\n\r\n    this.log(LogLevel.Info, logType, message);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param message - The message to log\r\n   * @description Logs a message with the [WARNING] prefix\r\n   *\r\n   * @example\r\n   * ```js\r\n   * manager.logger.warn(\"This is a warning!\");\r\n   * ```\r\n   */\r\n  warn(message: string) {\r\n    const logType: ILogType = {\r\n      prefix: \"[WARNING]\",\r\n      emoji: \"⚠️ \",\r\n      color: ConsoleColor.FgYellow,\r\n    };\r\n\r\n    this.log(LogLevel.Warn, logType, message);\r\n  }\r\n}\r\n"]}